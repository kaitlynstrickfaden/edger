stop(str_glue("imagepath is not a valid path", sep = ""))
}
if (is.null(ref_roi) == FALSE & is.list(ref_roi) == FALSE) {
stop("ref_roi must be a list object")
}
if (ref_th <= 0) {
stop("ref_th must be a positive non-zero number")
}
if (is.null(im_roi) == FALSE & is.list(im_roi) == FALSE) {
stop("im_roi must be a list object")
}
if (im_th <= 0) {
stop("im_th must be a positive non-zero number")
}
if (dimension %in% c("height", "width") == FALSE) {
stop('dimension must be one of "height" or "width"')
}
if (is.numeric(max_measurement) == FALSE) {
stop("max_measurement must be a numeric object")
}
if (is.character(color) == FALSE) {
stop("color must be a character string")
}
ref_edges <- edger_extract(refimage,
roi_in = ref_roi,
th = ref_th,
color = color,
show_image = show_images)
im_edges <- edger_extract(imagepath,
roi_in = im_roi,
th = im_th,
color = color,
show_image = show_images)
if (dimension == "height") {
ref_min <- min(ref_edges$y)
ref_max <- max(ref_edges$y)
im_min <- min(im_edges$y)
im_max <- max(im_edges$y)
ref_len <- ref_max - ref_min
ref_fact <- ref_len / max_measurement
im_len <- im_max - im_min
meas <- im_len / ref_fact
d <- data.frame("Ref_Min_Y" = ref_min,
"Ref_Max_Y" = ref_max,
"Im_Min_Y" = im_min,
"Im_Max_Y" = im_max,
"PixPerUnit" = round(ref_fact, 0),
"Measure" = round(max_measurement - meas, 1)
)
}
if (dimension == "width") {
ref_min <- min(ref_edges$x)
ref_max <- max(ref_edges$x)
im_min <- min(im_edges$x)
im_max <- max(im_edges$x)
ref_len <- ref_max - ref_min
ref_fact <- ref_len / max_measurement
im_len <- im_max - im_min
meas <- im_len / ref_fact
d <- data.frame("Ref_Min_X" = ref_min,
"Ref_Max_X" = ref_max,
"Im_Min_X" = im_min,
"Im_Max_X" = im_ax,
"PixPerUnit" = round(ref_fact, 0),
"Measure" = round(max_measurement - meas, 1)
)
}
return(d)
}
edger_measure(refimage, imagepath, ref_th = .1, im_th = .02, show_images = F)
edger_measure(refimage, "C://Users/stri7929/Desktop/02718_contourr.jpg", ref_th = .1, im_th = .02, show_images = F)
edger_measure(refimage, "C://Users/stri7929/Desktop/02958_contourr.jpg", ref_th = .1, im_th = .02, show_images = F)
refimage <- "C://Users/stri7929/Desktop/02824.jpg"
imagepath <- "C://Users/stri7929/Desktop/01266.jpg"
edger_roi <- function(imagepaths, regions = 1, color = "red") {
if (is.vector(imagepaths) == FALSE | is.character(imagepaths) == FALSE) {
stop("'imagepaths' must be a character vector")
}
roi <- list()
th <- c()
for (j in seq_along(imagepaths)) {
refimage <- imagepaths[j]
if (file.exists(refimage) == FALSE) {
stop(str_glue("imagepaths[", j, "] is not a valid path.", sep = "")) }
roi_d <- data.frame()
for (i in 1:regions) {
done <- FALSE
tv <- .1
roi_in <- grabRect(imager::load.image(refimage), output = "coord")
roi_in <- data.frame(x0 = roi_in[1], y0 = roi_in[2],
x1 = roi_in[3], y1 = roi_in[4])
edger_find(refimage,
roi_in = list(roi_in),
th = tv,
regions = regions,
color = color)
while (done == FALSE) {
interactive()
x <- readline(prompt = "Is this a good threshold value? Input Y for yes or N for no: ")
if (x == "Y") {
roi_d <- rbind(roi_d, roi_in)
th <- c(th, tv)
done <- TRUE
}
if (x != "Y") {
tvnew <- readline(prompt = str_glue("Current threshold value: {tv}  Input new threshold value: "))
while (suppressWarnings(is.na(as.numeric(tvnew))) == TRUE |
suppressWarnings(as.numeric(tvnew)) <= 0) {
tvnew <- readline(prompt = str_glue("Not a valid input. Please input a non-zero number.  Current threshold value: {tv}  Input new threshold value: "))
}
tv <- as.numeric(tvnew)
edger_find(refimage, roi_in = list(roi_in),
th = tv, color = color)
done <- FALSE
}
} # end of while loop
} # end of regions loop
roi[[j]] <- roi_d
} # end of images loop
return(list("roi" = roi,"th" = th))
} # end of function
edger_roi(c(refimage, imagepath))
rois <- edger_roi(c(refimage, imagepath))
rois$roi
edger_measure(refimage, imagepath, ref_roi = rois$roi[1], ref_th = rois$th[1], im_roi = rois$roi[2], im_th = rois$th[2], show_images = F)
edger_measure(refimage, imagepath, ref_roi = rois$roi[1], ref_th = rois$th[1], im_roi = rois$roi[1], im_th = rois$th[2], show_images = F)
library(imager)
?grabRect()
library(edger)
?edger_apply
shf <- c(0,0)
library(tidyverse)
Current threshold value: {shf}
str_glue("Current threshold value: {shf}  Input new shift value: ")
as.numeric(str_split("0,0", ","))
str_split("0,0", ",")
is.integer(0)
is.integer(1)
edger_testr <- function(imagepaths, regions = 1, color = "red") {
if (is.vector(imagepaths) == FALSE | is.character(imagepaths) == FALSE) {
stop("'imagepaths' must be a character vector")
}
roi <- list()
th <- c()
sh <- list()
for (j in seq_along(imagepaths)) {
refimage <- imagepaths[j]
if (file.exists(refimage) == FALSE) {
stop(str_glue("imagepaths[", j, "] is not a valid path.", sep = "")) }
roi_d <- data.frame()
for (i in 1:regions) {
thdone <- FALSE
tv <- .1
shdone <- FALSE
shf <- c(0,0)
roi_in <- grabRect(imager::load.image(refimage), output = "coord")
roi_in <- data.frame(x0 = roi_in[1], y0 = roi_in[2],
x1 = roi_in[3], y1 = roi_in[4])
edger_find(refimage,
roi_in = list(roi_in),
th = tv,
shift = shf,
regions = regions,
color = color)
while (thdone == FALSE) {
interactive()
x <- readline(prompt = "Is this a good threshold value? Input Y for yes or N for no: ")
if (x == "Y") {
roi_d <- rbind(roi_d, roi_in)
th <- c(th, tv)
thdone <- TRUE
}
if (x != "Y") {
tvnew <- readline(prompt = str_glue("Current threshold value: {tv}  Input new threshold value: "))
while (suppressWarnings(is.na(as.numeric(tvnew))) == TRUE |
suppressWarnings(as.numeric(tvnew)) <= 0) {
tvnew <- readline(prompt = str_glue("Not a valid input. Please input a non-zero number.  Current threshold value: {tv}  Input new threshold value: "))
}
tv <- as.numeric(tvnew)
edger_find(refimage, roi_in = list(roi_in),
th = tv, color = color)
thdone <- FALSE
}
} # end of th while loop
while (shdone == FALSE) {
interactive()
x <- readline(prompt = "Is this a good shift value? Input Y for yes or N for no: ")
if (x == "Y") {
shdone <- TRUE
}
if (x != "Y") {
xnew <- readline(prompt = str_glue("Current x shift: {shf[1]}  Input new x shift: "))
while (suppressWarnings(is.na(as.numeric(xnew))) == TRUE) {
xnew <- readline(prompt = str_glue("Not a valid input. Please input a number.  Current x shift: {shf[1]}  Input new x shift: "))
}
xsh <- round(as.numeric(xnew))
shf[1] <- xsh
ynew <- readline(prompt = str_glue("Current y shift: {shf[2]}  Input new y shift: "))
while (suppressWarnings(is.na(as.numeric(ynew))) == TRUE) {
ynew <- readline(prompt = str_glue("Not a valid input. Please input a number.  Current y shift: {shf[1]}  Input new y shift: "))
}
ysh <- round(as.numeric(ynew))
shf[2] <- ysh
edger_find(refimage, roi_in = list(roi_in),
th = tv, shift = shf, color = color)
shdone <- FALSE
}
} # end of sh while loop
} # end of regions loop
roi[[j]] <- roi_d
sh[[j]] <- shf
} # end of images loop
return(list("roi" = roi,"th" = th))
} # end of function
im <- "C://Users/stri7929/Desktop/02838.jpg"
edger_testr(im)
library(imager)
library(edger)
edger_testr(im)
edger_testr(im)
edger_testr <- function(imagepaths, regions = 1, color = "red") {
if (is.vector(imagepaths) == FALSE | is.character(imagepaths) == FALSE) {
stop("'imagepaths' must be a character vector")
}
roi <- list()
th <- c()
sh <- list()
for (j in seq_along(imagepaths)) {
refimage <- imagepaths[j]
if (file.exists(refimage) == FALSE) {
stop(str_glue("imagepaths[", j, "] is not a valid path.", sep = "")) }
roi_d <- data.frame()
for (i in 1:regions) {
thdone <- FALSE
tv <- .1
shdone <- FALSE
shf <- c(0,0)
roi_in <- grabRect(imager::load.image(refimage), output = "coord")
roi_in <- data.frame(x0 = roi_in[1], y0 = roi_in[2],
x1 = roi_in[3], y1 = roi_in[4])
edger_find(refimage,
roi_in = list(roi_in),
th = tv,
shift = shf,
regions = regions,
color = color)
while (thdone == FALSE) {
interactive()
x <- readline(prompt = "Is this a good threshold value? Input Y for yes or N for no: ")
if (x == "Y") {
roi_d <- rbind(roi_d, roi_in)
th <- c(th, tv)
thdone <- TRUE
}
if (x != "Y") {
tvnew <- readline(prompt = str_glue("Current threshold value: {tv}  Input new threshold value: "))
while (suppressWarnings(is.na(as.numeric(tvnew))) == TRUE |
suppressWarnings(as.numeric(tvnew)) <= 0) {
tvnew <- readline(prompt = str_glue("Not a valid input. Please input a non-zero number.  Current threshold value: {tv}  Input new threshold value: "))
}
tv <- as.numeric(tvnew)
edger_find(refimage, roi_in = list(roi_in),
th = tv, color = color)
thdone <- FALSE
}
} # end of th while loop
while (shdone == FALSE) {
interactive()
x <- readline(prompt = "Is this a good shift value? Input Y for yes or N for no: ")
if (x == "Y") {
shdone <- TRUE
}
if (x != "Y") {
xnew <- readline(prompt = str_glue("Current x shift: {shf[1]}  Input new x shift: "))
while (suppressWarnings(is.na(as.numeric(xnew))) == TRUE) {
xnew <- readline(prompt = str_glue("Not a valid input. Please input a number.  Current x shift: {shf[1]}  Input new x shift: "))
}
xsh <- round(as.numeric(xnew))
shf[1] <- xsh
ynew <- readline(prompt = str_glue("Current y shift: {shf[2]}  Input new y shift: "))
while (suppressWarnings(is.na(as.numeric(ynew))) == TRUE) {
ynew <- readline(prompt = str_glue("Not a valid input. Please input a number.  Current y shift: {shf[2]}  Input new y shift: "))
}
ysh <- round(as.numeric(ynew))
shf[2] <- ysh
edger_find(refimage, roi_in = list(roi_in),
th = tv, shift = shf, color = color)
shdone <- FALSE
}
} # end of sh while loop
} # end of regions loop
roi[[j]] <- roi_d
sh[[j]] <- shf
} # end of images loop
return(list("roi" = roi,"th" = th, "shift" = sh))
} # end of function
edger_testr(im)
t <- edger_testr(im)
t
t$shift[[1]]
str(t$shift[[1]])
im
im2 <- "C://Users/stri7929/Desktop/04553.jpg"
t <- edger_testr(c(im,im2))
t
edger_testr <- function(imagepaths, regions = 1, color = "red") {
if (is.vector(imagepaths) == FALSE | is.character(imagepaths) == FALSE) {
stop("'imagepaths' must be a character vector")
}
roi <- list()
th <- c()
sh <- list()
ro <- c()
for (j in seq_along(imagepaths)) {
refimage <- imagepaths[j]
if (file.exists(refimage) == FALSE) {
stop(str_glue("imagepaths[", j, "] is not a valid path.", sep = "")) }
roi_d <- data.frame()
for (i in 1:regions) {
thdone <- FALSE
tv <- .1
shdone <- FALSE
shf <- c(0,0)
rodone <- FALSE
rot <- 0
roi_in <- grabRect(imager::load.image(refimage), output = "coord")
roi_in <- data.frame(x0 = roi_in[1], y0 = roi_in[2],
x1 = roi_in[3], y1 = roi_in[4])
edger_find(refimage,
roi_in = list(roi_in),
th = tv,
shift = shf,
rotate = rot,
regions = regions,
color = color)
while (thdone == FALSE) {
interactive()
x <- readline(prompt = "Is this a good threshold value? Input Y for yes or N for no: ")
if (x == "Y") {
roi_d <- rbind(roi_d, roi_in)
th <- c(th, tv)
thdone <- TRUE
}
if (x != "Y") {
tvnew <- readline(prompt = str_glue("Current threshold value: {tv}  Input new threshold value: "))
while (suppressWarnings(is.na(as.numeric(tvnew))) == TRUE |
suppressWarnings(as.numeric(tvnew)) <= 0) {
tvnew <- readline(prompt = str_glue("Not a valid input. Please input a non-zero number.  Current threshold value: {tv}  Input new threshold value: "))
}
tv <- as.numeric(tvnew)
edger_find(refimage, roi_in = list(roi_in),
th = tv, color = color)
thdone <- FALSE
}
} # end of th while loop
while (shdone == FALSE) {
interactive()
x <- readline(prompt = "Is this a good shift value? Input Y for yes or N for no: ")
if (x == "Y") {
shdone <- TRUE
}
if (x != "Y") {
# x shift
xnew <- readline(prompt = str_glue("Current x shift: {shf[1]}  Input new x shift: "))
while (suppressWarnings(is.na(as.numeric(xnew))) == TRUE) {
xnew <- readline(prompt = str_glue("Not a valid input. Please input a number.  Current x shift: {shf[1]}  Input new x shift: "))
}
xsh <- round(as.numeric(xnew))
shf[1] <- xsh
# y shift
ynew <- readline(prompt = str_glue("Current y shift: {shf[2]}  Input new y shift: "))
while (suppressWarnings(is.na(as.numeric(ynew))) == TRUE) {
ynew <- readline(prompt = str_glue("Not a valid input. Please input a number.  Current y shift: {shf[2]}  Input new y shift: "))
}
ysh <- round(as.numeric(ynew))
shf[2] <- ysh
edger_find(refimage, roi_in = list(roi_in),
th = tv, shift = shf, color = color)
shdone <- FALSE
}
} # end of sh while loop
while (rodone == FALSE) {
interactive()
x <- readline(prompt = "Is this a good rotation value? Input Y for yes or N for no: ")
if (x == "Y") {
ro <- c(ro, rot)
rodone <- TRUE
}
if (x != "Y") {
ronew <- readline(prompt = str_glue("Current rotation value: {rot}  Input new threshold value: "))
while (suppressWarnings(is.na(as.numeric(ronew))) == TRUE |
suppressWarnings(as.numeric(ronew)) <= 0) {
tvnew <- readline(prompt = str_glue("Not a valid input. Please input a number.  Current threshold value: {rot}  Input new threshold value: "))
}
rot <- as.numeric(ronew)
edger_find(refimage, roi_in = list(roi_in),
th = tv, shift = shf, rotate = rot, color = color)
rodone <- FALSE
}
} # end of ro while loop
} # end of regions loop
roi[[j]] <- roi_d
sh[[j]] <- shf
ro[[j]] <- rot
} # end of images loop
return(list("roi" = roi,"th" = th, "shift" = sh, "rotate" = ro))
} # end of function
t <- edger_testr(c(im,im2))
edger_testr <- function(imagepaths, regions = 1, color = "red") {
if (is.vector(imagepaths) == FALSE | is.character(imagepaths) == FALSE) {
stop("'imagepaths' must be a character vector")
}
roi <- list()
th <- c()
sh <- list()
ro <- c()
for (j in seq_along(imagepaths)) {
refimage <- imagepaths[j]
if (file.exists(refimage) == FALSE) {
stop(str_glue("imagepaths[", j, "] is not a valid path.", sep = "")) }
roi_d <- data.frame()
for (i in 1:regions) {
thdone <- FALSE
tv <- .1
shdone <- FALSE
shf <- c(0,0)
rodone <- FALSE
rot <- 0
roi_in <- grabRect(imager::load.image(refimage), output = "coord")
roi_in <- data.frame(x0 = roi_in[1], y0 = roi_in[2],
x1 = roi_in[3], y1 = roi_in[4])
edger_find(refimage,
roi_in = list(roi_in),
th = tv,
shift = shf,
rotate = rot,
regions = regions,
color = color)
while (thdone == FALSE) {
interactive()
x <- readline(prompt = "Is this a good threshold value? Input Y for yes or N for no: ")
if (x == "Y") {
roi_d <- rbind(roi_d, roi_in)
th <- c(th, tv)
thdone <- TRUE
}
if (x != "Y") {
tvnew <- readline(prompt = str_glue("Current threshold value: {tv}  Input new threshold value: "))
while (suppressWarnings(is.na(as.numeric(tvnew))) == TRUE |
suppressWarnings(as.numeric(tvnew)) <= 0) {
tvnew <- readline(prompt = str_glue("Not a valid input. Please input a non-zero number.  Current threshold value: {tv}  Input new threshold value: "))
}
tv <- as.numeric(tvnew)
edger_find(refimage, roi_in = list(roi_in),
th = tv, color = color)
thdone <- FALSE
}
} # end of th while loop
while (shdone == FALSE) {
interactive()
x <- readline(prompt = "Is this a good shift value? Input Y for yes or N for no: ")
if (x == "Y") {
shdone <- TRUE
}
if (x != "Y") {
# x shift
xnew <- readline(prompt = str_glue("Current x shift: {shf[1]}  Input new x shift: "))
while (suppressWarnings(is.na(as.numeric(xnew))) == TRUE) {
xnew <- readline(prompt = str_glue("Not a valid input. Please input a number.  Current x shift: {shf[1]}  Input new x shift: "))
}
xsh <- round(as.numeric(xnew))
shf[1] <- xsh
# y shift
ynew <- readline(prompt = str_glue("Current y shift: {shf[2]}  Input new y shift: "))
while (suppressWarnings(is.na(as.numeric(ynew))) == TRUE) {
ynew <- readline(prompt = str_glue("Not a valid input. Please input a number.  Current y shift: {shf[2]}  Input new y shift: "))
}
ysh <- round(as.numeric(ynew))
shf[2] <- ysh
edger_find(refimage, roi_in = list(roi_in),
th = tv, shift = shf, color = color)
shdone <- FALSE
}
} # end of sh while loop
while (rodone == FALSE) {
interactive()
x <- readline(prompt = "Is this a good rotation value? Input Y for yes or N for no: ")
if (x == "Y") {
ro <- c(ro, rot)
rodone <- TRUE
}
if (x != "Y") {
ronew <- readline(prompt = str_glue("Current rotation value: {rot}  Input new threshold value: "))
while (suppressWarnings(is.na(as.numeric(ronew))) == TRUE) {
ronew <- readline(prompt = str_glue("Not a valid input. Please input a number.  Current threshold value: {rot}  Input new threshold value: "))
}
rot <- as.numeric(ronew)
edger_find(refimage, roi_in = list(roi_in),
th = tv, shift = shf, rotate = rot, color = color)
rodone <- FALSE
}
} # end of ro while loop
} # end of regions loop
roi[[j]] <- roi_d
sh[[j]] <- shf
ro[[j]] <- rot
} # end of images loop
return(list("roi" = roi,"th" = th, "shift" = sh, "rotate" = ro))
} # end of function
t <- edger_testr(c(im,im2))
t
View(edger_testr)

listimages <- list.files(str_c(cams[j], "Timelapse", sep = "/"))
listimages <- listimages[str_detect(listimages, "_contourr") == FALSE]
refimages <- listimages[str_detect(listimages, cams[j]) == TRUE]
if (length(refimages) == 0) {
stop(str_glue("Please place reference images in folder {cams[j]}"))
}
images <- c(refimages, listimages[listimages %in% refimages == FALSE])
images <- str_c(cams[j], "Timelapse", images, sep = "/")
refimages <- str_c(cams[j], "Timelapse", refimages, sep = "/")
images <- images[1:100]
rois <- ct_roi(refimages)
roi_in <- lapply(rois, "[[", "ROI")
contour_vals <- sapply(roi_in, "[[", "cv")
vs <- data.frame()
for (i in 1:viewsheds) {
interactive()
x <- readline(prompt = str_glue("Which are the reference images for viewshed {i}? Input numbers from 1 to {length(refimages)} separated by commas: "))
y <- readline(prompt = str_glue("And which images go with viewshed {i}? Input two numbers from 1 to {length(images) - length(refimages)} separated by a colon: "))
vs <- rbind(vs, c(x,y))
}
vs_ref <- as.numeric(sapply(vs[h,1], str_split, pattern = ",")[[1]])
vs_ims <- as.numeric(sapply(vs[h,2], str_split, pattern = ":")[[1]])
images[c(vs_ref,
(vs_ims[1] + length(refimages)):(vs_ims[2] + length(refimages)))]
length(vs_ref)
roi_in[vs_ref]
contour_vals[vs_ref]
invisible(ct_apply(images[c(vs_ref,
(vs_ims[1] + length(refimages)):(vs_ims[2] + length(refimages)))],
ref_images = length(vs_ref),
roi_in = roi_in[vs_ref],
contour_vals = contour_vals[vs_ref],
color = "red",
regions = regions,
shift = c(0,0),
show_image = FALSE,
process = "parallel",
cores = 7))
h <- 2
vs_ref <- as.numeric(sapply(vs[h,1], str_split, pattern = ",")[[1]])
vs_ims <- as.numeric(sapply(vs[h,2], str_split, pattern = ":")[[1]])
images[c(vs_ref,
(vs_ims[1] + length(refimages)):(vs_ims[2] + length(refimages)))]
length(vs_ref)
roi_in[vs_ref]
contour_vals[vs_ref]
invisible(ct_apply(images[c(vs_ref,
(vs_ims[1] + length(refimages)):(vs_ims[2] + length(refimages)))],
ref_images = length(vs_ref),
roi_in = roi_in[vs_ref],
contour_vals = contour_vals[vs_ref],
color = "red",
regions = regions,
shift = c(0,0),
show_image = FALSE,
process = "parallel",
cores = 7))
devtools::document()
setwd("C://Users/stri7929/Documents/GitHub/contourr")
devtools::document()
rm(list = c("ct_apply", "ct_df_to_im", "ct_display", "ct_find", "ct_identify", "ct_im_to_df", "ct_im_to_grad", "ct_match", "ct_name", "ct_overlay", "ct_recolor", "ct_roi", "ct_save"))
devtools::document()
devtools::install_github("kaitlynstrickfaden/contourr")
install.packages(c("bslib", "cachem", "caret", "devtools", "dplyr", "e1071", "emmeans", "fansi", "htmlTable", "httpuv", "installr", "landmap", "lme4", "Matrix", "matrixStats", "mgcv", "overlap", "pdftools", "RcppArmadillo", "rmarkdown", "rversions", "sass", "secr", "shape", "statmod", "stringi", "tesseract", "tibble", "tinytex", "unmarked", "viridis", "xfun", "zip"))
devtools::install_github("kaitlynstrickfaden/contourr", force = T, build_vignettes = T)
setwd("C://Users/stri7929/Documents/Test")
cams <- list.files()
cams <- cams[str_starts(cams, "I") | str_starts(cams, "A")]
library(dplyr)
library(furrr)
library(future)
library(imager)
library(progressr)
library(purrr)
library(stringr)
cams <- cams[str_starts(cams, "I") | str_starts(cams, "A")]
regions <- 1
j <- 1
viewsheds <- 2
h <- 1
any(str_detect(listimages, "_contourr") == TRUE)
listimages <- list.files(str_c(cams[j], "Timelapse", sep = "/"))
any(str_detect(listimages, "_contourr") == TRUE)
any(str_detect(listimages, "_contourr_contourr") == TRUE)
library(contourr)
setwd("C://Users/stri7929/Documents/Test")
cams <- list.files()
cams <- cams[str_starts(cams, "I") | str_starts(cams, "A")]
viewsheds <- 1
for (j in cams) {
# Check to see if the images have already been analyzed
# If not, prep for analysis
listimages <- list.files(str_c(cams[j], "Timelapse", sep = "/"))
if (any(str_detect(listimages, "_contourr") == FALSE)) {
refimages <- listimages[str_detect(listimages, cams[j]) == TRUE]
if (length(refimages) == 0) {
stop(str_glue("Please place reference images in folder {cams[j]}"))
}
images <- c(refimages, listimages[listimages %in% refimages == FALSE])
images <- str_c(cams[j], "Timelapse", images, sep = "/")
refimages <- str_c(cams[j], "Timelapse", refimages, sep = "/")
# Define ROIs and contour values for each reference image
rois <- ct_roi(refimages)
roi_in <- lapply(rois, "[[", "ROI")
contour_vals <- sapply(roi_in, "[[", "cv")
# Define different viewsheds
vs <- data.frame()
for (i in 1:viewsheds) {
interactive()
x <- readline(prompt = str_glue("Which are the reference images for viewshed {i}? Input numbers from 1 to {length(refimages)} separated by commas: "))
y <- readline(prompt = str_glue("And which images go with viewshed {i}? Input two numbers from 1 to {length(images) - length(refimages)} separated by a colon: "))
vs <- rbind(vs, c(x,y))
}
# Recolor images in each of the different viewsheds
st <- Sys.time()
for (h in 1:nrow(vs)) {
vs_ref <- as.numeric(sapply(vs[h,1], str_split, pattern = ",")[[1]])
vs_ims <- as.numeric(sapply(vs[h,2], str_split, pattern = ":")[[1]])
invisible(ct_apply(images[c(vs_ref,
(vs_ims[1] + length(refimages)):
(vs_ims[2] + length(refimages)))],
ref_images = length(vs_ref),
roi_in = roi_in[vs_ref],
contour_vals = contour_vals[vs_ref],
color = "red",
regions = regions,
shift = c(0,0),
show_image = FALSE,
process = "parallel",
cores = 7))
}
round(Sys.time() - st1, 2)
}
}
for (j in cams) {
# Check to see if the images have already been analyzed
# If not, prep for analysis
listimages <- list.files(str_c(cams[j], "Timelapse", sep = "/"))
if (any(str_detect(listimages, "_contourr") == FALSE)) {
refimages <- listimages[str_detect(listimages, cams[j]) == TRUE]
if (length(refimages) == 0) {
stop(str_glue("Please place reference images in folder {cams[j]}"))
}
images <- c(refimages, listimages[listimages %in% refimages == FALSE])
images <- str_c(cams[j], "Timelapse", images, sep = "/")
refimages <- str_c(cams[j], "Timelapse", refimages, sep = "/")
# Define ROIs and contour values for each reference image
rois <- ct_roi(refimages)
roi_in <- lapply(rois, "[[", "ROI")
contour_vals <- sapply(roi_in, "[[", "cv")
# Define different viewsheds
vs <- data.frame()
for (i in 1:viewsheds) {
interactive()
x <- readline(prompt = str_glue("Which are the reference images for viewshed {i}? Input numbers from 1 to {length(refimages)} separated by commas: "))
y <- readline(prompt = str_glue("And which images go with viewshed {i}? Input two numbers from 1 to {length(images) - length(refimages)} separated by a colon: "))
vs <- rbind(vs, c(x,y))
}
# Recolor images in each of the different viewsheds
st <- Sys.time()
for (h in 1:nrow(vs)) {
vs_ref <- as.numeric(sapply(vs[h,1], str_split, pattern = ",")[[1]])
vs_ims <- as.numeric(sapply(vs[h,2], str_split, pattern = ":")[[1]])
invisible(ct_apply(images[c(vs_ref,
(vs_ims[1] + length(refimages)):
(vs_ims[2] + length(refimages)))],
ref_images = length(vs_ref),
roi_in = roi_in[vs_ref],
contour_vals = contour_vals[vs_ref],
color = "red",
regions = regions,
shift = c(0,0),
show_image = FALSE,
process = "parallel",
cores = 7))
}
round(Sys.time() - st1, 2)
}
}
for (j in 1:length(cams)) {
# Check to see if the images have already been analyzed
# If not, prep for analysis
listimages <- list.files(str_c(cams[j], "Timelapse", sep = "/"))
if (any(str_detect(listimages, "_contourr") == FALSE)) {
refimages <- listimages[str_detect(listimages, cams[j]) == TRUE]
if (length(refimages) == 0) {
stop(str_glue("Please place reference images in folder {cams[j]}"))
}
images <- c(refimages, listimages[listimages %in% refimages == FALSE])
images <- str_c(cams[j], "Timelapse", images, sep = "/")
refimages <- str_c(cams[j], "Timelapse", refimages, sep = "/")
# Define ROIs and contour values for each reference image
rois <- ct_roi(refimages)
roi_in <- lapply(rois, "[[", "ROI")
contour_vals <- sapply(roi_in, "[[", "cv")
# Define different viewsheds
vs <- data.frame()
for (i in 1:viewsheds) {
interactive()
x <- readline(prompt = str_glue("Which are the reference images for viewshed {i}? Input numbers from 1 to {length(refimages)} separated by commas: "))
y <- readline(prompt = str_glue("And which images go with viewshed {i}? Input two numbers from 1 to {length(images) - length(refimages)} separated by a colon: "))
vs <- rbind(vs, c(x,y))
}
# Recolor images in each of the different viewsheds
st <- Sys.time()
for (h in 1:nrow(vs)) {
vs_ref <- as.numeric(sapply(vs[h,1], str_split, pattern = ",")[[1]])
vs_ims <- as.numeric(sapply(vs[h,2], str_split, pattern = ":")[[1]])
invisible(ct_apply(images[c(vs_ref,
(vs_ims[1] + length(refimages)):
(vs_ims[2] + length(refimages)))],
ref_images = length(vs_ref),
roi_in = roi_in[vs_ref],
contour_vals = contour_vals[vs_ref],
color = "red",
regions = regions,
shift = c(0,0),
show_image = FALSE,
process = "parallel",
cores = 7))
}
round(Sys.time() - st1, 2)
}
}
regions <- 1
for (j in 1:length(cams)) {
# Check to see if the images have already been analyzed
# If not, prep for analysis
listimages <- list.files(str_c(cams[j], "Timelapse", sep = "/"))
if (any(str_detect(listimages, "_contourr") == FALSE)) {
refimages <- listimages[str_detect(listimages, cams[j]) == TRUE]
if (length(refimages) == 0) {
stop(str_glue("Please place reference images in folder {cams[j]}"))
}
images <- c(refimages, listimages[listimages %in% refimages == FALSE])
images <- str_c(cams[j], "Timelapse", images, sep = "/")
refimages <- str_c(cams[j], "Timelapse", refimages, sep = "/")
# Define ROIs and contour values for each reference image
rois <- ct_roi(refimages)
roi_in <- lapply(rois, "[[", "ROI")
contour_vals <- sapply(roi_in, "[[", "cv")
# Define different viewsheds
vs <- data.frame()
for (i in 1:viewsheds) {
interactive()
x <- readline(prompt = str_glue("Which are the reference images for viewshed {i}? Input numbers from 1 to {length(refimages)} separated by commas: "))
y <- readline(prompt = str_glue("And which images go with viewshed {i}? Input two numbers from 1 to {length(images) - length(refimages)} separated by a colon: "))
vs <- rbind(vs, c(x,y))
}
# Recolor images in each of the different viewsheds
st <- Sys.time()
for (h in 1:nrow(vs)) {
vs_ref <- as.numeric(sapply(vs[h,1], str_split, pattern = ",")[[1]])
vs_ims <- as.numeric(sapply(vs[h,2], str_split, pattern = ":")[[1]])
invisible(ct_apply(images[c(vs_ref,
(vs_ims[1] + length(refimages)):
(vs_ims[2] + length(refimages)))],
ref_images = length(vs_ref),
roi_in = roi_in[vs_ref],
contour_vals = contour_vals[vs_ref],
color = "red",
regions = regions,
shift = c(0,0),
show_image = FALSE,
process = "parallel",
cores = 7))
}
round(Sys.time() - st1, 2)
}
}
im1 <- "C://Users/stri7929/Desktop/03768.jpg"
rgbcolor <- as.vector(grDevices::col2rgb(color)/255)
rgbcolor <- as.vector(grDevices::col2rgb("red")/255)
roi <- ct_identify(ref_ims = imagepath,
roi_in = roi_in,
contour_vals = contour_val,
regions = regions)
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_apply.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_df_to_im.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_display.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_find.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_identify.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_im_to_df.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_im_to_grad.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_match.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_name.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_overlay.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_recolor.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_roi.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_save.R")
roi <- ct_identify(ref_ims = imagepath,
roi_in = roi_in,
contour_vals = contour_val,
regions = regions)
roi <- ct_identify(ref_ims = im1,
roi_in = roi_in,
contour_vals = contour_val,
regions = regions)
roi_in <- NULL
contour_val <- .1
shift <- c(0,0)
rotate <- 15
save <- FALSE
color <- "red"
roi <- ct_identify(ref_ims = im1,
roi_in = roi_in,
contour_vals = contour_val,
regions = regions)
library(dplyr)
library(furrr)
library(future)
library(imager)
library(progressr)
library(purrr)
library(stringr)
roi <- ct_identify(ref_ims = im1,
roi_in = roi_in,
contour_vals = contour_val,
regions = regions)
regions <- 1
roi <- ct_identify(ref_ims = im1,
roi_in = roi_in,
contour_vals = contour_val,
regions = regions)
roi
im <- imager::load.image(im1)
im_df <- ct_im_to_df(im)
im_df
m <- ct_match(imdf = im_df,
roi = roi,
shift = shift,
rotate = rotate)
m
im_new <- ct_recolor(imdf = im_df,
m = m,
rgbcolor = rgbcolor,
show = TRUE)
m <- ct_match(imdf = im_df,
roi = roi,
shift = shift,
rotate = rotate)
im_new <- ct_recolor(imdf = im_df,
m = m,
rgbcolor = rgbcolor,
show = TRUE)
rotate <- -15
m <- ct_match(imdf = im_df,
roi = roi,
shift = shift,
rotate = rotate)
im_new <- ct_recolor(imdf = im_df,
m = m,
rgbcolor = rgbcolor,
show = TRUE)
shift <- c(100,100)
m <- ct_match(imdf = im_df,
roi = roi,
shift = shift,
rotate = rotate)
im_new <- ct_recolor(imdf = im_df,
m = m,
rgbcolor = rgbcolor,
show = TRUE)
shift <- c(1400,0)
m <- ct_match(imdf = im_df,
roi = roi,
shift = shift,
rotate = rotate)
im_new <- ct_recolor(imdf = im_df,
m = m,
rgbcolor = rgbcolor,
show = TRUE)
shift <- c(800,0)
m <- ct_match(imdf = im_df,
roi = roi,
shift = shift,
rotate = rotate)
im_new <- ct_recolor(imdf = im_df,
m = m,
rgbcolor = rgbcolor,
show = TRUE)
shift <- c(900,0)
m <- ct_match(imdf = im_df,
roi = roi,
shift = shift,
rotate = rotate)
im_new <- ct_recolor(imdf = im_df,
m = m,
rgbcolor = rgbcolor,
show = TRUE)
rotate <- 15
m <- ct_match(imdf = im_df,
roi = roi,
shift = shift,
rotate = rotate)
im_new <- ct_recolor(imdf = im_df,
m = m,
rgbcolor = rgbcolor,
show = TRUE)
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_apply.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_df_to_im.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_display.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_find.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_identify.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_im_to_df.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_im_to_grad.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_match.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_name.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_overlay.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_recolor.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_roi.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_save.R")
m <- ct_match(imdf = im_df,
roi = roi,
shift = shift,
rotate = rotate)
im_new <- ct_recolor(imdf = im_df,
m = m,
rgbcolor = rgbcolor,
show = TRUE)
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_apply.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_df_to_im.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_display.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_find.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_identify.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_im_to_df.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_im_to_grad.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_match.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_name.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_overlay.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_recolor.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_roi.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_save.R")
m <- ct_match(imdf = im_df,
roi = roi,
shift = shift,
rotate = rotate)
im_new <- ct_recolor(imdf = im_df,
m = m,
rgbcolor = rgbcolor,
show = TRUE)
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_match.R")
m <- ct_match(imdf = im_df,
roi = roi,
shift = shift,
rotate = rotate)
im_new <- ct_recolor(imdf = im_df,
m = m,
rgbcolor = rgbcolor,
show = TRUE)
ct_find(im1)
ct_find(im1, rotate = 30)
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_match.R")
ct_find(im1, rotate = 30)
ct_find(im1, rotate = 30)
ct_find(im1, rotate = 30)
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_match.R")
ct_find(im1, rotate = 30)
ct_find(im1, rotate = 30, regions = 2)
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_match.R")
ct_find(im1, rotate = 30, regions = 2)
shift <- c(0,0)
ct_find(im1, rotate = 30, regions = 2)
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_match.R")
ct_find(im1, rotate = 30, regions = 2)
ct_find(im1, rotate = 30)
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_match.R")
ct_find(im1, rotate = 30)
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_match.R")
ct_find(im1, rotate = 30)
ct_find(im1, rotate = 30)
ct_find(im1, rotate = -30)
ct_find(im1, rotate = -30)
ct_find(im1, rotate = -30)
ct_find(im1, rotate = -30)
ct_find(im1, rotate = 30)
ct_find(im1, rotate = -30)
ct_find(im1, rotate = -30)
ct_find(im1, rotate = -30)
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_match.R")
ct_find(im1, rotate = -30)
ct_find(im1, rotate = -30)
ct_find(im1, rotate = 30)
ct_find(im1, rotate = -30)
ct_find(im1, rotate = -90)
ct_find(im1, rotate = -180)
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_match.R")
ct_find(im1, rotate = -180)
ct_find(im1, rotate = -90)
ct_find(im1, rotate = 90)
ct_find(im1, rotate = -90)
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_match.R")
ct_find(im1, rotate = -90)
ct_find(im1, rotate = -1800)
ct_find(im1, rotate = -180)
ct_find(im1, rotate = 90)
ct_find(im1, rotate = 15)
ct_find(im1, rotate = -15)
ct_find(im1, rotate = -15)
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_match.R")
ct_find(im1, rotate = -15)
ct_find(im1, rotate = 15)
ct_find(im1, rotate = 15)
ct_find(im1, rotate = -15)
ct_find(im1, rotate = -15, shift = c(100,00))
ct_find(im1, rotate = 15, shift = c(100,100))
ct_find(im1, rotate = 90, shift = c(100,100))
ct_find(im1, rotate = -90, shift = c(100,100))
ct_find(im1, rotate = -90)
ct_find(im1, rotate = -90, regions - 2)
ct_find(im1, rotate = -90, regions = 2)
ct_find(im1, rotate = 15, regions = 2)

regions = 1,
shift = c(0,0),
rotate = 0,
color = "red",
show_image = TRUE)
{
if (is.null(roi_in) == FALSE & is.list(roi_in) == FALSE) {
stop("roi_in must be a list object.")
}
if (th <= 0) {
stop("th must be a positive non-zero number.")
}
if (is.character(color) == FALSE) {
stop("color must be a character string.")
}
rgbcolor <- as.vector(grDevices::col2rgb(color)/255)
roi <- edger_identify(ref_ims = imagepath,
roi_in = roi_in,
th = th,
regions = regions)
im <- imager::load.image(imagepath)
im_df <- edger_im_to_df(im)
m <- edger_match(imdf = im_df,
roi = roi,
shift = shift,
rotate = rotate)
if (show == TRUE) {
edger_recolor(imdf = im_df,
m = m,
rgbcolor = rgbcolor,
show = TRUE)
}
return(im_df[im_df$id %in% m,])
}
edger_extract("C://Users/stri7929/Desktop/02858.jpg")
source("C://Users/stri7929/Documents/GitHub/edger/R/edger_apply.R")
source("C://Users/stri7929/Documents/GitHub/edger/R/edger_df_to_im.R")
source("C://Users/stri7929/Documents/GitHub/edger/R/edger_display.R")
source("C://Users/stri7929/Documents/GitHub/edger/R/edger_find.R")
source("C://Users/stri7929/Documents/GitHub/edger/R/edger_identify.R")
source("C://Users/stri7929/Documents/GitHub/edger/R/edger_im_to_df.R")
source("C://Users/stri7929/Documents/GitHub/edger/R/edger_im_to_grad.R")
source("C://Users/stri7929/Documents/GitHub/edger/R/edger_match.R")
source("C://Users/stri7929/Documents/GitHub/edger/R/edger_name_old.R")
source("C://Users/stri7929/Documents/GitHub/edger/R/edger_overlay.R")
source("C://Users/stri7929/Documents/GitHub/edger/R/edger_recolor.R")
source("C://Users/stri7929/Documents/GitHub/edger/R/edger_roi.R")
source("C://Users/stri7929/Documents/GitHub/edger/R/edger_save.R")
edger_extract("C://Users/stri7929/Desktop/02858.jpg")
edger_extract("C://Users/stri7929/Desktop/02838.jpg")
library(tidyverse)
edger_extract("C://Users/stri7929/Desktop/02838.jpg")
edger_extract <- function(imagepath,
roi_in = NULL,
th = 0.1,
regions = 1,
shift = c(0,0),
rotate = 0,
color = "red",
show_image = TRUE)
{
if (is.null(roi_in) == FALSE & is.list(roi_in) == FALSE) {
stop("roi_in must be a list object.")
}
if (th <= 0) {
stop("th must be a positive non-zero number.")
}
if (is.character(color) == FALSE) {
stop("color must be a character string.")
}
rgbcolor <- as.vector(grDevices::col2rgb(color)/255)
roi <- edger_identify(ref_ims = imagepath,
roi_in = roi_in,
th = th,
regions = regions)
im <- imager::load.image(imagepath)
im_df <- edger_im_to_df(im)
m <- edger_match(imdf = im_df,
roi = roi,
shift = shift,
rotate = rotate)
if (show_image == TRUE) {
edger_recolor(imdf = im_df,
m = m,
rgbcolor = rgbcolor,
show = TRUE)
}
return(im_df[im_df$id %in% m,])
}
edger_extract("C://Users/stri7929/Desktop/02838.jpg")
edges <- edger_extract("C://Users/stri7929/Desktop/02838.jpg")
edges
edges[edges$id = 1710844]
edges[edges$id == 1710844,]
edger_extract <- function(imagepath,
roi_in = NULL,
th = 0.1,
regions = 1,
shift = c(0,0),
rotate = 0,
color = "red",
show_image = TRUE)
{
if (is.null(roi_in) == FALSE & is.list(roi_in) == FALSE) {
stop("roi_in must be a list object.")
}
if (th <= 0) {
stop("th must be a positive non-zero number.")
}
if (is.character(color) == FALSE) {
stop("color must be a character string.")
}
rgbcolor <- as.vector(grDevices::col2rgb(color)/255)
roi <- edger_identify(ref_ims = imagepath,
roi_in = roi_in,
th = th,
regions = regions)
im <- imager::load.image(imagepath)
im_df <- edger_im_to_df(im)
m <- edger_match(imdf = im_df,
roi = roi,
shift = shift,
rotate = rotate)
if (show_image == TRUE) {
edger_recolor(imdf = im_df,
m = m,
rgbcolor = rgbcolor,
show = TRUE)
}
return(distinct(im_df[im_df$id %in% m,c("x", "y", "id")]))
}
edges <- edger_extract("C://Users/stri7929/Desktop/02838.jpg")
edges
edges <- edger_extract("C://Users/stri7929/Desktop/02838.jpg", th = .05)
edges <- edger_extract("C://Users/stri7929/Desktop/02838.jpg", th = .03)
edges
edges <- edger_extract("C://Users/stri7929/Desktop/02838.jpg", th = .03, rotate = 15)
devtools::document()
getwd()
setwd("C://Users/stri7929/Documents/GitHub/edger")
devtools::document()
rm(list = c("edger_apply", "edger_df_to_im", "edger_display", "edger_extract", "edger_find", "edger_identify", "edger_im_to_df", "edger_im_to_grad", "edger_match", "edger_name", "edger_overlay", "edger_recolor", "edger_roi", "edger_save"))
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
rmarkdown::render("ender_use.RMD", output_format = "github_document")
rmarkdown::render("edger_use.RMD", output_format = "github_document")
rmarkdown::render("vignettes/edger_use.RMD", output_format = "github_document")
?is.list
devtools::install_github("kaitlynstrickfaden/edger", force = T, build_vignettes = T)
library(edger)
library(edger)
library(dplyr)
library(imager)
library(progressr)
library(qpdf)
library(stringr)
roi1 <- data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219)
roi2 <- data.frame(x1 = 457, y1 = 501, x2 = 526, y2 = 1105)
roi3 <- data.frame(x1 = 633, y1 = 638, x2 = 874, y2 = 799)
edger::edger_apply(c(im1, im2), th = c(.1,.1,.05),
ref_images = 2, regions = 2,
roi_in = list(rbind(roi1, roi2),
roi3),
color = "deeppink1")
roi1 <- data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219)
roi2 <- data.frame(x1 = 457, y1 = 501, x2 = 526, y2 = 1105)
roi3 <- data.frame(x1 = 633, y1 = 638, x2 = 874, y2 = 799)
edger::edger_apply(c(im1, im2), th = c(.1,.05),
ref_images = 2, regions = 2,
roi_in = list(rbind(roi1, roi2),
roi3),
color = "deeppink1")
im1 <- "../images/image03.jpg"
par(mar = c(0,0,0,0))
plot(imager::load.image(im1), axes = F)
im2 <- "../images/image04.jpg"
im3 <- "../images/image05.jpg"
roi1 <- data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219)
roi2 <- data.frame(x1 = 457, y1 = 501, x2 = 526, y2 = 1105)
roi3 <- data.frame(x1 = 633, y1 = 638, x2 = 874, y2 = 799)
edger::edger_apply(c(im1, im2), th = c(.1,.05),
ref_images = 2, regions = 2,
roi_in = list(rbind(roi1, roi2),
roi3),
color = "deeppink1")
roi1 <- data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219)
roi2 <- data.frame(x1 = 457, y1 = 501, x2 = 526, y2 = 1105)
roi3 <- data.frame(x1 = 633, y1 = 638, x2 = 874, y2 = 799)
roi_in = list(rbind(roi1, roi2),
roi3),
roi_in = list(rbind(roi1, roi2),
roi3)
as.numeric(roi_in[[2]][2,])
edger::edger_apply(c(im1, im2), roi_in = list(roi1),
shift = c(200, -200), rotate = 30, color = "yellow")
library(edger)
edger::edger_apply(c(im1, im2), roi_in = list(roi1),
shift = c(200, -200), rotate = 30, color = "yellow")
remove.packages(stringi)
remove.packages("stringi")
install.packages("stringi")
install.packages("stringi")
install.packages("stringi")
remove.packages("cli")
install.packages("cli")
install.packages("cli")
devtools::install_github("kaitlynstrickfaden/edger", force = T, build_vignettes = T)
library(edger)
library(edger)
library(dplyr)
library(imager)
library(progressr)
library(qpdf)
library(stringr)
roi1 <- data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219)
roi2 <- data.frame(x1 = 457, y1 = 501, x2 = 526, y2 = 1105)
roi3 <- data.frame(x1 = 633, y1 = 638, x2 = 874, y2 = 799)
edger::edger_apply(c(im1, im2), th = c(.1,.05),
ref_images = 2, regions = 2,
roi_in = list(rbind(roi1, roi2),
roi3),
color = "deeppink1")
edger::edger_apply(c(im1, im2), roi_in = list(roi1),
shift = c(200, -200), rotate = 30, color = "yellow")
rmarkdown::render("vignettes/edger_use.rmd", output_format = "github_document")
devtools::document()
?edger::edger_df_to_im_bw
?edger::edger_df_to_im_color
?edger::edger_df_to_im_col
devtools::document()
devtools::document()
d <- list()
imagepaths <- "C://Users/stri7929/Desktop/02838.jpg"
j <- 1
i <- 1
d <- list()
for (j in seq_along(imagepaths)) {
refimage <- imagepaths[j]
if (file.exists(refimage) == FALSE) {
stop(str_glue("imagepaths[", j, "] is not a valid path.", sep = "")) }
roi_d <- data.frame()
for (i in 1:regions) {
done <- FALSE
tv <- .1
roi_in <- grabRect(imager::load.image(refimage), output = "coord")
roi_in <- data.frame(x0 = roi_in[1], y0 = roi_in[2],
x1 = roi_in[3], y1 = roi_in[4])
edger_find(refimage,
roi_in = list(roi_in),
th = tv,
regions = regions,
color = color)
while (done == FALSE) {
interactive()
x <- readline(prompt = "Is this a good threshold value? Input Y for yes or N for no: ")
if (x == "Y") {
roi_add <- cbind(roi_in, tv)
roi_d <- rbind(roi_d, roi_add)
done <- TRUE
}
if (x != "Y") {
tvnew <- readline(prompt = str_glue("Current threshold value: {tv}  Input new threshold value: "))
while (suppressWarnings(is.na(as.numeric(tvnew))) == TRUE |
suppressWarnings(as.numeric(tvnew)) <= 0) {
tvnew <- readline(prompt = str_glue("Not a valid input. Please input a non-zero number.  Current threshold value: {tv}  Input new threshold value: "))
}
tv <- as.numeric(tvnew)
edger_find(refimage, roi_in = list(roi_in),
th = tv, color = color)
done <- FALSE
}
} # end of while loop
} # end of regions loop
d[[j]] <- list(Image = refimage, ROI = roi_d)
} # end of images loop
regions <- 1
color = "red"
for (j in seq_along(imagepaths)) {
refimage <- imagepaths[j]
if (file.exists(refimage) == FALSE) {
stop(str_glue("imagepaths[", j, "] is not a valid path.", sep = "")) }
roi_d <- data.frame()
for (i in 1:regions) {
done <- FALSE
tv <- .1
roi_in <- grabRect(imager::load.image(refimage), output = "coord")
roi_in <- data.frame(x0 = roi_in[1], y0 = roi_in[2],
x1 = roi_in[3], y1 = roi_in[4])
edger_find(refimage,
roi_in = list(roi_in),
th = tv,
regions = regions,
color = color)
while (done == FALSE) {
interactive()
x <- readline(prompt = "Is this a good threshold value? Input Y for yes or N for no: ")
if (x == "Y") {
roi_add <- cbind(roi_in, tv)
roi_d <- rbind(roi_d, roi_add)
done <- TRUE
}
if (x != "Y") {
tvnew <- readline(prompt = str_glue("Current threshold value: {tv}  Input new threshold value: "))
while (suppressWarnings(is.na(as.numeric(tvnew))) == TRUE |
suppressWarnings(as.numeric(tvnew)) <= 0) {
tvnew <- readline(prompt = str_glue("Not a valid input. Please input a non-zero number.  Current threshold value: {tv}  Input new threshold value: "))
}
tv <- as.numeric(tvnew)
edger_find(refimage, roi_in = list(roi_in),
th = tv, color = color)
done <- FALSE
}
} # end of while loop
} # end of regions loop
d[[j]] <- list(Image = refimage, ROI = roi_d)
} # end of images loop
library(tidyverse)
library(imager)
for (j in seq_along(imagepaths)) {
refimage <- imagepaths[j]
if (file.exists(refimage) == FALSE) {
stop(str_glue("imagepaths[", j, "] is not a valid path.", sep = "")) }
roi_d <- data.frame()
for (i in 1:regions) {
done <- FALSE
tv <- .1
roi_in <- grabRect(imager::load.image(refimage), output = "coord")
roi_in <- data.frame(x0 = roi_in[1], y0 = roi_in[2],
x1 = roi_in[3], y1 = roi_in[4])
edger_find(refimage,
roi_in = list(roi_in),
th = tv,
regions = regions,
color = color)
while (done == FALSE) {
interactive()
x <- readline(prompt = "Is this a good threshold value? Input Y for yes or N for no: ")
if (x == "Y") {
roi_add <- cbind(roi_in, tv)
roi_d <- rbind(roi_d, roi_add)
done <- TRUE
}
if (x != "Y") {
tvnew <- readline(prompt = str_glue("Current threshold value: {tv}  Input new threshold value: "))
while (suppressWarnings(is.na(as.numeric(tvnew))) == TRUE |
suppressWarnings(as.numeric(tvnew)) <= 0) {
tvnew <- readline(prompt = str_glue("Not a valid input. Please input a non-zero number.  Current threshold value: {tv}  Input new threshold value: "))
}
tv <- as.numeric(tvnew)
edger_find(refimage, roi_in = list(roi_in),
th = tv, color = color)
done <- FALSE
}
} # end of while loop
} # end of regions loop
d[[j]] <- list(Image = refimage, ROI = roi_d)
} # end of images loop
library(edger)
for (j in seq_along(imagepaths)) {
refimage <- imagepaths[j]
if (file.exists(refimage) == FALSE) {
stop(str_glue("imagepaths[", j, "] is not a valid path.", sep = "")) }
roi_d <- data.frame()
for (i in 1:regions) {
done <- FALSE
tv <- .1
roi_in <- grabRect(imager::load.image(refimage), output = "coord")
roi_in <- data.frame(x0 = roi_in[1], y0 = roi_in[2],
x1 = roi_in[3], y1 = roi_in[4])
edger_find(refimage,
roi_in = list(roi_in),
th = tv,
regions = regions,
color = color)
while (done == FALSE) {
interactive()
x <- readline(prompt = "Is this a good threshold value? Input Y for yes or N for no: ")
if (x == "Y") {
roi_add <- cbind(roi_in, tv)
roi_d <- rbind(roi_d, roi_add)
done <- TRUE
}
if (x != "Y") {
tvnew <- readline(prompt = str_glue("Current threshold value: {tv}  Input new threshold value: "))
while (suppressWarnings(is.na(as.numeric(tvnew))) == TRUE |
suppressWarnings(as.numeric(tvnew)) <= 0) {
tvnew <- readline(prompt = str_glue("Not a valid input. Please input a non-zero number.  Current threshold value: {tv}  Input new threshold value: "))
}
tv <- as.numeric(tvnew)
edger_find(refimage, roi_in = list(roi_in),
th = tv, color = color)
done <- FALSE
}
} # end of while loop
} # end of regions loop
d[[j]] <- list(Image = refimage, ROI = roi_d)
} # end of images loop
d
roith <- lapply(d, "[[", "ROI")
roith
roi <- lapply(roith, "[[", 1:4)
roi <- lapply(roith, "[[", -5)
?apply()
roi <- list()
th <- c()
for (j in seq_along(imagepaths)) {
refimage <- imagepaths[j]
if (file.exists(refimage) == FALSE) {
stop(str_glue("imagepaths[", j, "] is not a valid path.", sep = "")) }
roi_d <- data.frame()
for (i in 1:regions) {
done <- FALSE
tv <- .1
roi_in <- grabRect(imager::load.image(refimage), output = "coord")
roi_in <- data.frame(x0 = roi_in[1], y0 = roi_in[2],
x1 = roi_in[3], y1 = roi_in[4])
edger_find(refimage,
roi_in = list(roi_in),
th = tv,
regions = regions,
color = color)
while (done == FALSE) {
interactive()
x <- readline(prompt = "Is this a good threshold value? Input Y for yes or N for no: ")
if (x == "Y") {
roi_d <- rbind(roi_d, roi_in)
th <- c(th, tv)
done <- TRUE
}
if (x != "Y") {
tvnew <- readline(prompt = str_glue("Current threshold value: {tv}  Input new threshold value: "))
while (suppressWarnings(is.na(as.numeric(tvnew))) == TRUE |
suppressWarnings(as.numeric(tvnew)) <= 0) {
tvnew <- readline(prompt = str_glue("Not a valid input. Please input a non-zero number.  Current threshold value: {tv}  Input new threshold value: "))
}
tv <- as.numeric(tvnew)
edger_find(refimage, roi_in = list(roi_in),
th = tv, color = color)
done <- FALSE
}
} # end of while loop
} # end of regions loop
roi[[j]] <- roi_d
} # end of images loop
roi
th
li <- list("roi" = roi,"th" = th))
li <- list("roi" = roi,"th" = th)
li$roi
li$th
edger_roi <- function(imagepaths, regions = 1, color = "red") {
if (is.vector(imagepaths) == FALSE | is.character(imagepaths) == FALSE) {
stop("'imagepaths' must be a character vector")
}
roi <- list()
th <- c()
for (j in seq_along(imagepaths)) {
refimage <- imagepaths[j]
if (file.exists(refimage) == FALSE) {
stop(str_glue("imagepaths[", j, "] is not a valid path.", sep = "")) }
roi_d <- data.frame()
for (i in 1:regions) {
done <- FALSE
tv <- .1
roi_in <- grabRect(imager::load.image(refimage), output = "coord")
roi_in <- data.frame(x0 = roi_in[1], y0 = roi_in[2],
x1 = roi_in[3], y1 = roi_in[4])
edger_find(refimage,
roi_in = list(roi_in),
th = tv,
regions = regions,
color = color)
while (done == FALSE) {
interactive()
x <- readline(prompt = "Is this a good threshold value? Input Y for yes or N for no: ")
if (x == "Y") {
roi_d <- rbind(roi_d, roi_in)
th <- c(th, tv)
done <- TRUE
}
if (x != "Y") {
tvnew <- readline(prompt = str_glue("Current threshold value: {tv}  Input new threshold value: "))
while (suppressWarnings(is.na(as.numeric(tvnew))) == TRUE |
suppressWarnings(as.numeric(tvnew)) <= 0) {
tvnew <- readline(prompt = str_glue("Not a valid input. Please input a non-zero number.  Current threshold value: {tv}  Input new threshold value: "))
}
tv <- as.numeric(tvnew)
edger_find(refimage, roi_in = list(roi_in),
th = tv, color = color)
done <- FALSE
}
} # end of while loop
} # end of regions loop
roi[[j]] <- roi_d
} # end of images loop
# roith <- lapply(d, "[[", "ROI")
# roi <- lapply(roith, "[[", -5)
# th <- sapply(roith, "[[", 5)
return(list("roi" = roi,"th" = th))
} # end of function
imagepaths
imagepaths <- c("C://Users/stri7929/Desktop/02838.jpg", "C://Users/stri7929/Desktop/03768.jpg")
edger_roi(imagepaths)
li <- edger_roi(imagepaths)
li$roi
li$th
str(li$roi)
str(li$th)

roi_in[[vs_ref]]
st1 <- Sys.time()
invisible(ct_apply(images[vs_ims + length(refimages)],
ref_images = length(vs_ims),
roi_in = roi_in[[vs_ref]],
contour_vals = contour_vals,
color = "red",
regions = 1,
shift = c(0,0),
show_image = FALSE,
process = "parallel",
cores = 7))
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_apply_test.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_df_to_im.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_display.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_find_test.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_identify.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_im_to_df.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_im_to_grad.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_match.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_name.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_overlay.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_recolor.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_roi.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_save.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_apply_test.R")
st1 <- Sys.time()
invisible(ct_apply(images[vs_ims + length(refimages)],
ref_images = length(vs_ims),
roi_in = roi_in[[vs_ref]],
contour_vals = contour_vals,
color = "red",
regions = 1,
shift = c(0,0),
show_image = FALSE,
process = "parallel",
cores = 7))
r <- roi_in[[vs_ref]]
length(r)
r
list(r)
h <- 2
vs_ref <- as.numeric(sapply(vs[h,1], str_split, pattern = ",")[[1]])
vs_ims <- as.numeric(sapply(vs[h,2], str_split, pattern = ":")[[1]])
vs_ref
vs_ims
vs_ref
roi_in[[vs_ref]]
roi_in
roi_in[[vs_ref]]
roi_in[vs_ref]
vs_ref
h <- 1
vs_ref <- as.numeric(sapply(vs[h,1], str_split, pattern = ",")[[1]])
vs_ims <- as.numeric(sapply(vs[h,2], str_split, pattern = ":")[[1]])
roi_in[vs_ref]
rois
roi_in
contour_vals <- lapply(roi_in, "[[", "cv")
contour_vals
contour_vals[[vs_ref]]
h <- 2
vs_ref <- as.numeric(sapply(vs[h,1], str_split, pattern = ",")[[1]])
vs_ims <- as.numeric(sapply(vs[h,2], str_split, pattern = ":")[[1]])
contour_vals[[vs_ref]]
sapply(contour_vals[vs_ref], "[[", 1)
list(.1, .1)
contour_vals
list(c(.1,.1) .1)
list(c(.1,.1), .1)
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_apply_test.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_df_to_im.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_display.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_find_test.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_identify.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_im_to_df.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_im_to_grad.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_match.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_name.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_overlay.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_recolor.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_roi.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_save.R")
vs_ref
vs_ims
images[c(vs_ref,
vs_ims[1] + length(refimages):vs_ims[2] + length(refimages))]
refimages
images[vs_ims[1] + length(refimages):vs_ims[2] + length(refimages))]
images[vs_ims[1] + length(refimages):vs_ims[2] + length(refimages)]
images
images[vs_ims[1] + length(refimages):vs_ims[2] + length(refimages)]
vs_ims[1]
vs_ims[2]
images
vs_ims[1] + length(refimages)
images[c(vs_ref,
(vs_ims[1] + length(refimages)):(vs_ims[2] + length(refimages)))]
vs
length(vs)
nrow(vs)
for (h in 1:nrow(vs)) {
vs_ref <- as.numeric(sapply(vs[h,1], str_split, pattern = ",")[[1]])
vs_ims <- as.numeric(sapply(vs[h,2], str_split, pattern = ":")[[1]])
st1 <- Sys.time()
invisible(ct_apply(images[c(vs_ref,
(vs_ims[1] + length(refimages)):(vs_ims[2] + length(refimages)))],
ref_images = length(vs_ims),
roi_in = roi_in[vs_ref],
contour_vals = contour_vals[vs_ref],
color = "red",
regions = regions,
shift = c(0,0),
show_image = FALSE,
process = "parallel",
cores = 7))
round(Sys.time() - st1, 2)
}
listimages <- list.files(str_c(cams[j], "Timelapse", sep = "/"))
listimages <- listimages[str_detect(listimages, "_contourr") == FALSE]
refimages <- listimages[str_detect(listimages, cams[j]) == TRUE]
if (length(refimages) == 0) {
stop(str_glue("Please place reference images in folder {cams[j]}"))
}
images <- c(refimages, listimages[listimages %in% refimages == FALSE])
images <- str_c(cams[j], "Timelapse", images, sep = "/")
refimages <- str_c(cams[j], "Timelapse", refimages, sep = "/")
images <- images[1:100]
rois <- ct_roi(refimages)
roi_in <- lapply(rois, "[[", "ROI")
contour_vals <- lapply(roi_in, "[[", "cv")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_roi.R")
rois <- ct_roi(refimages)
list(.1) <= 0
list(0) <= 0
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_find_test.R")
rois <- ct_roi(refimages)
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_apply_test.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_df_to_im.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_display.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_find_test.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_identify.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_im_to_df.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_im_to_grad.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_match.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_name.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_overlay.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_recolor.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_roi.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_save.R")
invisible(ct_apply(images[c(vs_ref,
(vs_ims[1] + length(refimages)):(vs_ims[2] + length(refimages)))],
ref_images = length(vs_ims),
roi_in = roi_in[vs_ref],
contour_vals = contour_vals,
color = "red",
regions = regions,
shift = c(0,0),
show_image = FALSE,
process = "parallel",
cores = 7))
rois <- ct_roi(refimages)
refimagers
refimages
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_identify.R")
rois <- ct_roi(refimages)
ct_roi(refimages[1])
ct_find(refimages[1])
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_find_test.R")
rois
rois <- ct_roi(refimages)
setwd("C://Users/stri7929/Documents/Test")
cams <- list.files()
cams <- cams[str_starts(cams, "I") | str_starts(cams, "A")]
regions <- 1
listimages <- list.files(str_c(cams[j], "Timelapse", sep = "/"))
j <- 1
listimages <- list.files(str_c(cams[j], "Timelapse", sep = "/"))
listimages <- listimages[str_detect(listimages, "_contourr") == FALSE]
refimages <- listimages[str_detect(listimages, cams[j]) == TRUE]
if (length(refimages) == 0) {
stop(str_glue("Please place reference images in folder {cams[j]}"))
}
images <- c(refimages, listimages[listimages %in% refimages == FALSE])
images <- str_c(cams[j], "Timelapse", images, sep = "/")
refimages <- str_c(cams[j], "Timelapse", refimages, sep = "/")
images <- images[1:100]
rois <- ct_roi(refimages)
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_apply_test.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_df_to_im.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_display.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_find_test.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_identify.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_im_to_df.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_im_to_grad.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_match.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_name.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_overlay.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_recolor.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_roi.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_save.R")
rois <- ct_roi(refimages)
roi_in
rois <- ct_roi(refimages)
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_roi.R")
rois <- ct_roi(refimages)
ct_identify(refimages[1])
r1 <- ct_identify(refimages[1])
r1
im <- imager::load.image(refimages[1])
im_df <- ct_im_to_df(im)
m <- ct_match(imdf = im_df,
roi = r1,
shift = shift)
m <- ct_match(imdf = im_df,
roi = r1,
shift = c(0,0))
im_new <- ct_recolor(imdf = im_df,
m = m,
rgbcolor = rgbcolor,
show = TRUE)
im_new <- ct_recolor(imdf = im_df,
m = m,
rgbcolor = rgbcolor <- as.vector(grDevices::col2rgb("red")/255),
show = TRUE)
View(ct_find)
ct_roi <- function(imagepaths, regions = 1, color = "red") {
if (is.vector(imagepaths) == FALSE | is.character(imagepaths) == FALSE) {
stop("'imagepaths' must be a character vector")
}
d <- list()
for (j in seq_along(imagepaths)) {
refimage <- imagepaths[j]
if (file.exists(refimage) == FALSE) {
stop(str_glue("imagepaths[", j, "] is not a valid path.", sep = "")) }
roi_d <- data.frame()
for (i in 1:regions) {
done <- FALSE
cv <- .1
roi_in <- grabRect(imager::load.image(refimage), output = "coord")
roi_in <- data.frame(x0 = roi_in[1], y0 = roi_in[2],
x1 = roi_in[3], y1 = roi_in[4])
print(str_glue("Finding contours in region {i} of image {j}..."))
ct_find(refimage,
roi_in = roi_in,
contour_val = cv,
regions = regions,
color = color)
while (done == FALSE) {
interactive()
x <- readline(prompt = "Is this a good contour value? Input Y for yes or N for no: ")
if (x == "Y") {
roi_add <- cbind(roi_in, cv)
roi_d <- rbind(roi_d, roi_add)
done <- TRUE
}
if (x != "Y") {
cv <- as.numeric(readline(prompt = str_glue("Current contour value: {cv}  Input new contour value: ")))
ct_find(refimage, roi_in = roi_in, contour_val = cv, color = color)
done <- FALSE
}
} # end of while loop
} # end of regions loop
d[[j]] <- list(Image = refimage, ROI = roi_d)
} # end of images loop
return(d)
} # end of function
ct_roi(refimages[1])
setwd("C://Users/stri7929/Documents/Test")
cams <- list.files()
cams <- cams[str_starts(cams, "I") | str_starts(cams, "A")]
regions <- 1
j <- 1
listimages <- list.files(str_c(cams[j], "Timelapse", sep = "/"))
listimages <- listimages[str_detect(listimages, "_contourr") == FALSE]
refimages <- listimages[str_detect(listimages, cams[j]) == TRUE]
if (length(refimages) == 0) {
stop(str_glue("Please place reference images in folder {cams[j]}"))
}
images <- c(refimages, listimages[listimages %in% refimages == FALSE])
images <- str_c(cams[j], "Timelapse", images, sep = "/")
refimages <- str_c(cams[j], "Timelapse", refimages, sep = "/")
images <- images[1:100]
imagepaths <- refimages[1]
if (is.vector(imagepaths) == FALSE | is.character(imagepaths) == FALSE) {
stop("'imagepaths' must be a character vector")
}
d <- list()
refimage <- imagepaths[j]
if (file.exists(refimage) == FALSE) {
stop(str_glue("imagepaths[", j, "] is not a valid path.", sep = "")) }
roi_d <- data.frame()
regions <- 1
done <- FALSE
cv <- .1
roi_in <- grabRect(imager::load.image(refimage), output = "coord")
roi_in <- data.frame(x0 = roi_in[1], y0 = roi_in[2],
x1 = roi_in[3], y1 = roi_in[4])
roi_in
ct_find(refimage,
roi_in = roi_in,
contour_val = cv,
regions = regions,
color = color)
color = "red"
ct_find(refimage,
roi_in = roi_in,
contour_val = cv,
regions = regions,
color = color)
while (done == FALSE) {
interactive()
x <- readline(prompt = "Is this a good contour value? Input Y for yes or N for no: ")
if (x == "Y") {
roi_add <- cbind(roi_in, cv)
roi_d <- rbind(roi_d, roi_add)
done <- TRUE
}
if (x != "Y") {
cv <- as.numeric(readline(prompt = str_glue("Current contour value: {cv}  Input new contour value: ")))
ct_find(refimage, roi_in = roi_in, contour_val = cv, color = color)
done <- FALSE
}
} # end of while loop
ct_roi(imagepaths)
ct_roi <- function(imagepaths, regions = 1, color = "red") {
if (is.vector(imagepaths) == FALSE | is.character(imagepaths) == FALSE) {
stop("'imagepaths' must be a character vector")
}
d <- list()
for (j in seq_along(imagepaths)) {
refimage <- imagepaths[j]
if (file.exists(refimage) == FALSE) {
stop(str_glue("imagepaths[", j, "] is not a valid path.", sep = "")) }
roi_d <- data.frame()
for (i in 1:regions) {
done <- FALSE
cv <- .1
roi_in <- grabRect(imager::load.image(refimage), output = "coord")
roi_in <- data.frame(x0 = roi_in[1], y0 = roi_in[2],
x1 = roi_in[3], y1 = roi_in[4])
print(str_glue("Finding contours in region {i} of image {j}..."))
ct_find(refimage,
roi_in = roi_in,
contour_val = cv,
regions = regions,
color = color)
while (done == FALSE) {
interactive()
x <- readline(prompt = "Is this a good contour value? Input Y for yes or N for no: ")
if (x == "Y") {
roi_add <- cbind(roi_in, cv)
roi_d <- rbind(roi_d, roi_add)
done <- TRUE
}
if (x != "Y") {
cv <- as.numeric(readline(prompt = str_glue("Current contour value: {cv}  Input new contour value: ")))
ct_find(refimage, roi_in = roi_in, contour_val = cv, color = color)
done <- FALSE
}
} # end of while loop
} # end of regions loop
d[[j]] <- list(Image = refimage, ROI = roi_d)
} # end of images loop
return(d)
} # end of function
ct_roi(imagepaths)
ct_roi(refimages)
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_apply_test.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_df_to_im.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_display.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_find_test.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_identify.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_im_to_df.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_im_to_grad.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_match.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_name.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_overlay.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_recolor.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_roi.R")
source("C://Users/stri7929/Documents/GitHub/contourr/R/ct_save.R")
setwd("C://Users/stri7929/Documents/Test")
cams <- list.files()
cams <- cams[str_starts(cams, "I") | str_starts(cams, "A")]
regions <- 1
j <- 1
listimages <- list.files(str_c(cams[j], "Timelapse", sep = "/"))
listimages <- listimages[str_detect(listimages, "_contourr") == FALSE]
refimages <- listimages[str_detect(listimages, cams[j]) == TRUE]
if (length(refimages) == 0) {
stop(str_glue("Please place reference images in folder {cams[j]}"))
}
images <- c(refimages, listimages[listimages %in% refimages == FALSE])
images <- str_c(cams[j], "Timelapse", images, sep = "/")
refimages <- str_c(cams[j], "Timelapse", refimages, sep = "/")
images <- images[1:100]
rois <- ct_roi(refimages)
refimages
ct_identify <- function(ref_ims,
roi_in = NULL,
contour_vals = .1,
regions = 1
)
{
if (length(ref_ims) != length(contour_vals)) {
stop("Number of contour values must equal number of reference images")
}
roi <- NULL
for (j in 1:length(ref_ims)) {
im <- imager::load.image(ref_ims[j])
im_bw <- ct_im_to_grad(im)
## Define region of interest if "roi_in" is not set:
if (is.null(roi_in) == TRUE) {
for (i in 1:regions) {
im_roi <- imager::grabRect(im, output = "coord")
roi2 <- dplyr::filter(im_bw,
im_bw$x >= im_roi[1] & im_bw$x <= im_roi[3] &
im_bw$y >= im_roi[2] & im_bw$y <= im_roi[4] &
im_bw$value >= contour_vals[j])
roi <- rbind(roi, roi2)
} # End of regions
}
if (is.null(roi_in) == FALSE) {
for (i in 1:regions) {
im_roi <- as.numeric(roi_in[[j]][i,])
roi2 <- dplyr::filter(im_bw,
im_bw$x >= im_roi[1] & im_bw$x <= im_roi[3] &
im_bw$y >= im_roi[2] & im_bw$y <= im_roi[4] &
im_bw$value >= contour_vals[j])
roi <- rbind(roi, roi2)
} # End of regions
}
} # End of photos
return(distinct(roi))
}
ct_identify(refimages[1])
ct_cvdf <- function(imagepaths, regions = 1, color = "red") {
if (is.vector(imagepaths) == FALSE | is.character(imagepaths) == FALSE) {
stop("'imagepaths' must be a character vector")
}
d <- list()
for (j in seq_along(imagepaths)) {
refimage <- imagepaths[[j]]
if (file.exists(refimage) == FALSE) {
stop(str_glue("imagepaths[", j, "] is not a valid path.", sep = "")) }
roi_d <- data.frame()
for (i in 1:regions) {
done <- FALSE
cv <- .1
roi_in <- grabRect(imager::load.image(refimage), output = "coord")
roi_in <- data.frame(x0 = roi_in[1], y0 = roi_in[2],
x1 = roi_in[3], y1 = roi_in[4])
print(str_glue("Finding contours in region {i} of image {j}..."))
ct_find(refimage, roi_in = roi_in, contour_value = cv, color = color)
while (done == FALSE) {
interactive()
x <- readline(prompt = "Is this a good contour value? Input Y for yes or N for no: ")
if (x == "Y") {
roi_add <- cbind(roi_in, cv)
roi_d <- rbind(roi_d, roi_add)
done <- TRUE
}
if (x != "Y") {
cv <- as.numeric(readline(prompt = str_glue("Current contour value: {cv}  Input new contour value: ")))
ct_find(refimage, roi_in = roi_in, contour_value = cv, color = color)
done <- FALSE
}
} # end of while loop
} # end of regions loop
d[[j]] <- list(Image = refimage, ROI = roi_d)
} # end of images loop
return(d)
} # end of function
ct_cvdf(refimages)
ct_cvdf <- function(imagepaths, regions = 1, color = "red") {
if (is.vector(imagepaths) == FALSE | is.character(imagepaths) == FALSE) {
stop("'imagepaths' must be a character vector")
}
d <- list()
for (j in seq_along(imagepaths)) {
refimage <- imagepaths[[j]]
if (file.exists(refimage) == FALSE) {
stop(str_glue("imagepaths[", j, "] is not a valid path.", sep = "")) }
roi_d <- data.frame()
for (i in 1:regions) {
done <- FALSE
cv <- .1
roi_in <- grabRect(imager::load.image(refimage), output = "coord")
roi_in <- data.frame(x0 = roi_in[1], y0 = roi_in[2],
x1 = roi_in[3], y1 = roi_in[4])
print(str_glue("Finding contours in region {i} of image {j}..."))
ct_find(refimage, roi_in = roi_in, contour_val = cv, color = color)
while (done == FALSE) {
interactive()
x <- readline(prompt = "Is this a good contour value? Input Y for yes or N for no: ")
if (x == "Y") {
roi_add <- cbind(roi_in, cv)
roi_d <- rbind(roi_d, roi_add)
done <- TRUE
}
if (x != "Y") {
cv <- as.numeric(readline(prompt = str_glue("Current contour value: {cv}  Input new contour value: ")))
ct_find(refimage, roi_in = roi_in, contour_val = cv, color = color)
done <- FALSE
}
} # end of while loop
} # end of regions loop
d[[j]] <- list(Image = refimage, ROI = roi_d)
} # end of images loop
return(d)
} # end of function
ct_cvdf(refimages)

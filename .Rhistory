#
#   for (i in 1:regions) {
#
#     im_roi <- as.numeric(roi_in[i,])
#
#     roi2 <- dplyr::filter(im_bw,
#                    im_bw$x >= im_roi[1] & im_bw$x <= im_roi[3] &
#                    im_bw$y >= im_roi[2] & im_bw$y <= im_roi[4])
#
#     roi <- rbind(roi, roi2)
#
#   } # End of regions
#
#   ## Track time
#
#   st <- Sys.time()
#
#   ## Find edges in region of interest
#
#   roi_c <- roi[roi$value >= th,]
#
#   ## Match edge pixels in full image
#
#   m <- im_df$id[match(roi_c$id, im_df$id)]
#
#   ## Recolor edge pixels in full image
#
#   im_df$value[im_df$id %in% m] <- rep(rgbcolor, each = length(m))
#
#
#
#   ## Display the new image
#
#   im <- imager::as.cimg(im_df, dim = dim(im))
#   par(mar = c(0,0,0,0))
#   plot(im)
#
#
#   ## Save new image if save == TRUE
#
#   if (save == TRUE) {
#
#     image_split <- stringr::str_split(image, "\\.")[[1]]
#     image_start <- str_flatten(image_split[c(1:length(image_split) - 1)], collapse = ".")
#     image_end <- image_split[length(image_split)]
#     image_name <- paste(image_start, "_edger.", image_end, sep = "")
#
#
#     grDevices::jpeg(image_name, width = dim(im)[1], height = dim(im)[2])
#     par(mar = c(0,0,0,0))
#     plot(im)
#     dev.off()
#
#   } # End of save == TRUE
#
#   round(Sys.time() - st, 2)
#
# } # End of function
# roi1 <- imager::grabRect(imager::load.image(im1), output = "coord")
roi1 <- list(data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219))
edger_find(im1, roi_in = roi1)
roi1 <- data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219)
edger::edger_find(im1, roi_in = roi1, th = 0.07, color = "cyan1")
roi1 <- list(data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219))
edger::edger_find(im1, roi_in = roi1, th = 0.07, color = "cyan1")
edger_find(im1, roi_in = roi1, th = 0.07, color = "cyan1")
rect(roi1[,1], roi1[,2], roi1[,3], roi1[,4], lwd = 2)
sapply(roi1)
sapply(roi1, "[[")
sapply(roi1, "[[", 1:4)
sapply(roi1, "[[", 1)
sapply(roi1, "[[", 2)
sapply(roi1, "[[", c(1:4))
vapply(roi1, "[[", c(1:4))
?sapply
roi1 <- data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219))
roi1 <- data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219)
edger::edger_find(im1, roi_in = list(roi1), th = 0.07, color = "cyan1")
edger_find(im1, roi_in = list(roi1), th = 0.07, color = "cyan1")
rect(roi1[,1], roi1[,2], roi1[,3], roi1[,4], lwd = 2)
text(x = roi1[,1] - 100, roi1[,2] - 40, labels = str_glue("({roi1[,1]}, {roi1[,2]})"))
text(x = roi1[,3] + 120, roi1[,4] + 40, labels = str_glue("({roi1[,3]}, {roi1[,4]})"))
roi2 <- data.frame(x1 = 457, y1 = 501, x2 = 526, y2 = 1105)
edger::edger_find(im1, roi_in = list(roi1, roi2), regions = 2, color = "purple")
roi2 <- data.frame(x1 = 457, y1 = 501, x2 = 526, y2 = 1105)
edger::edger_find(im1, roi_in = list(list(roi1), list(roi2)), regions = 2, color = "purple")
roi2 <- data.frame(x1 = 457, y1 = 501, x2 = 526, y2 = 1105)
edger::edger_find(im1, roi_in = list(roi1, roi2), regions = 2, color = "purple")
list(roi1, roi2)
roi2 <- data.frame(x1 = 457, y1 = 501, x2 = 526, y2 = 1105)
edger::edger_find(im1, roi_in = list(rbind(roi1, roi2)), regions = 2, color = "purple")
im2 <- "../images/image04.jpg"
im3 <- "../images/image05.jpg"
library(edger)
library(dplyr)
library(imager)
library(progress)
library(qpdf)
library(stringr)
im2 <- "../images/image04.jpg"
im3 <- "../images/image05.jpg"
roi1 <- data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219)
edger::edger_apply(c(im1, im2), roi_in = list(roi1), color = "green1")
im1 <- "../images/image03.jpg"
par(mar = c(0,0,0,0))
plot(imager::load.image(im1), axes = F)
edger::edger_find(im1)
roi1 <- list(data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219))
edger_find(im1, roi_in = roi1)
roi1 <- data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219)
edger::edger_find(im1, roi_in = list(roi1), th = 0.07, color = "cyan1")
edger_find(im1, roi_in = list(roi1), th = 0.07, color = "cyan1")
rect(roi1[,1], roi1[,2], roi1[,3], roi1[,4], lwd = 2)
text(x = roi1[,1] - 100, roi1[,2] - 40, labels = str_glue("({roi1[,1]}, {roi1[,2]})"))
text(x = roi1[,3] + 120, roi1[,4] + 40, labels = str_glue("({roi1[,3]}, {roi1[,4]})"))
roi2 <- data.frame(x1 = 457, y1 = 501, x2 = 526, y2 = 1105)
edger::edger_find(im1, roi_in = list(rbind(roi1, roi2)), regions = 2, color = "purple")
im2 <- "../images/image04.jpg"
im3 <- "../images/image05.jpg"
roi1 <- data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219)
edger::edger_apply(c(im1, im2), roi_in = list(roi1), color = "green1")
library(edger)
library(dplyr)
library(imager)
library(progressr)
library(qpdf)
library(stringr)
roi1 <- data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219)
edger::edger_apply(c(im1, im2), roi_in = list(roi1), color = "green1")
roi1 <- data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219)
edger_apply(c(im1, im2), roi_in = roi1, color = "green1")
edger::edger_overlay(c(im1, im2), roi_in = list(roi1),
shift = c(200, -200), color = "orangered2")
edger::edger_apply(c(im1, im2), roi_in = list(roi1),
shift = c(200, -200), color = "orangered2")
roi1 <- data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219)
roi3 <- data.frame(x1 = 1687, y1 = 66, x2 = 1761, y2 = 1219)
edger::edger_apply(c(im1, im2),
ref_images = 2, roi_in = list(roi1, roi3),
color = "deeppink1")
roi1 <- data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219)
roi3 <- data.frame(x1 = 1687, y1 = 66, x2 = 1761, y2 = 1219)
edger::edger_apply(c(im1, im2),
ref_images = 2, roi_in = list(roi1, roi3),
color = "deeppink1")
roi1 <- data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219)
roi3 <- data.frame(x1 = 1687, y1 = 66, x2 = 1761, y2 = 1219)
edger::edger_apply(c(im1, im2),
ref_ims = 2, roi_in = list(roi1, roi3),
color = "deeppink1")
roi1 <- data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219)
roi3 <- data.frame(x1 = 1687, y1 = 66, x2 = 1761, y2 = 1219)
edger::edger_apply(c(im1, im2),
ref_images = 2, roi_in = list(roi1, roi3),
color = "deeppink1")
roi1 <- data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219)
roi3 <- data.frame(x1 = 1687, y1 = 66, x2 = 1761, y2 = 1219)
edger::edger_apply(c(im1, im2), th = c(.1,.1),
ref_images = 2, roi_in = list(roi1, roi3),
color = "deeppink1")
roi1 <- data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219)
roi3 <- data.frame(x1 = 1687, y1 = 66, x2 = 1761, y2 = 1219)
edger::edger_apply(c(im1, im2), th = c(.1,.07),
ref_images = 2, roi_in = list(roi1, roi3),
color = "deeppink1")
roi1 <- data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219)
roi3 <- data.frame(x1 = 1687, y1 = 66, x2 = 1761, y2 = 1219)
edger::edger_apply(c(im1, im2), th = c(.1,.05),
ref_images = 2, roi_in = list(roi1, roi3),
color = "deeppink1")
roi1 <- data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219)
roi3 <- data.frame(x1 = 1687, y1 = 66, x2 = 1761, y2 = 1219)
edger::edger_apply(c(im1, im2), th = c(.1,.03),
ref_images = 2, roi_in = list(roi1, roi3),
color = "deeppink1")
roi1 <- data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219)
roi3 <- data.frame(x1 = 1687, y1 = 66, x2 = 1761, y2 = 1219)
edger::edger_apply(c(im1, im2), th = c(.1,.05),
ref_images = 2, roi_in = list(roi1, roi3),
color = "deeppink1")
roi3 <- grabRect(im2, "coord")
roi1 <- data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219)
roi3 <- data.frame(x1 = 1687, y1 = 66, x2 = 1761, y2 = 1219)
roi3 <- grabRect(im2, "coord")
roi1 <- data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219)
roi3 <- data.frame(x1 = 1687, y1 = 66, x2 = 1761, y2 = 1219)
roi3 <- grabRect(load.image(im2), "coord")
edger::edger_apply(c(im1, im2), th = c(.1,.05),
ref_images = 2, roi_in = list(roi1, roi3),
color = "deeppink1")
roi3
roi1 <- data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219)
roi3 <- data.frame(x1 = 633, y1 = 638, x2 = 874, y2 = 799)
edger::edger_apply(c(im1, im2), th = c(.1,.05),
ref_images = 2, roi_in = list(roi1, roi3),
color = "deeppink1")
furrr::detectCores
library(imager)
setwd("C://Users/stri7929/Desktop")
im1 <- load.image("02838.jpg")
cont <- contours(im1)
?contours
im1_g <- grayscale(im1)
cont <- contours(im1_g)
cont <- contours(im1_g, nlevels = 5)
plot(cont)
purrr::walk(cont,function(v) lines(v$x,v$y,col="red"))
plot(im1_g)
purrr::walk(cont,function(v) lines(v$x,v$y,col="red"))
?contours
im1_p <- im1_g > .8
plot(im1_p)
im1_p <- im1_g > .6
plot(im1_p)
im1_p <- im1_g > .4
plot(im1_p)
im1_p <- im1_g > .5
plot(im1_p)
cont <- contours(im1_p)
cont <- contours(im1_p, nlevels = 10)
cont <- contours(im1_p)
plot(im1_p)
purrr::walk(cont,function(v) lines(v$x,v$y,col="red"))
cont$x
cont
lapply(cont, "[[", 1)
unique(lapply(cont, "[[", 1))
unique(lapply(lapply(cont, "[[", 1), "[[", 1)
)
unique(lapply(lapply(cont, "[[", 2))
)
unique(lapply(cont, "[[", 2))
cont
cont[1:100]$level
cont$level
sapply(cont, "[[", 1:3)
sapply(cont, "[[", 1)
unique(sapply(cont, "[[", 1))
contourLines(im1_p)
contourLines(z = im1_p)
contours(im1_p)
plot(im1_p)
purrr::walk(ct,function(v) lines(v$x,v$y,col=v$level))
purrr::walk(cont,function(v) lines(v$x,v$y,col=v$level))
cont <- contours(im1_p, nlevels = 10)
plot(im1_p)
purrr::walk(cont,function(v) lines(v$x,v$y,col=v$level))
purrr::walk(cont, .x$level)
purrr::map(cont, .x$level)
purrr::map(cont, ~ .x$level)
purrr::map_int(cont, ~ .x$level)
purrr::map_dbl(cont, ~ .x$level)
unique(purrr::map_dbl(cont, ~ .x$level))
plot(im1_p)
purrr::walk(cont,function(v) lines(v$x,v$y,col="red"))
par(mar = c(0,0,0,0))
plot(im1_p)
purrr::walk(cont,function(v) lines(v$x,v$y,col="red"))
jpeg("imager_ContourDetection.jpg", width = 1000, height = 700, quality = 100)
par(mar = c(0,0,0,0))
plot(im1_p)
purrr::walk(cont,function(v) lines(v$x,v$y,col="red"))
dev.off()
jpeg("imager_ContourDetection.jpg", width = 1000, height = 700, quality = 100)
par(mar = c(0,0,0,0))
plot(im1)
purrr::walk(cont,function(v) lines(v$x,v$y,col="red"))
dev.off()
cont <- contours(im1_g, nlevels = 10)
par(mar = c(0,0,0,0))
plot(im1)
purrr::walk(cont,function(v) lines(v$x,v$y,col="red"))
plot(im1)
purrr::walk(cont,function(v) lines(v$x,v$y,col=v$level))
cont
unique(purrr::map_dbl(cont, ~ .x$level))
cont <- contours(im1_g, nlevels = 10)
levs <- unique(purrr::map_dbl(cont, ~ .x$level))
colors <- rainbow(length(levs)
)
par(mar = c(0,0,0,0))
plot(im1)
purrr::walk(cont,function(v) lines(v$x,v$y,col=colors))
par(mar = c(0,0,0,0))
plot(im1)
purrr::walk(cont,function(v) lines(v$x,v$y,col=colors[x$level]))
purrr::walk(cont,function(v) lines(v$x,v$y,col=colors[v$level]))
purrr::walk(cont,function(v) lines(v$x,v$y,col=colors[v$level*10]))
im2 <- Rvision::image("02838.jpg")
im2_g <- changeColorSpace(im2, "GRAY")
library(Rvision)
im2_g <- changeColorSpace(im2, "GRAY")
im1_bin <- im1 < 110
rm_im1_bin
rm(im1_bin)
im2_bin <- im2 < 110
plot(im2_bin)
im2_g <- changeColorSpace(im2, "GRAY")
im2_bin <- im2_g < 110
plot(im2_bin)
im2_bin <- im2_g < 120
plot(im2_bin)
fc <- findContours(im2_bin, 'list', 'none')
colors <- rainbow(max(d3$contours$id + 1))
colors <- rainbow(max(fc$contours$id + 1))
plot(im2_bin)
plot(im2)
invisible(sapply(
base::split(fc$contours, fc$contours$id),
function(dat) {
dat <- rbind(dat, dat[1, ])
lines(y ~ x, data = dat, col = colors, lwd = .5) # col = colors[id + 1]
})
)
invisible(sapply(
base::split(fc$contours, fc$contours$id),
function(dat) {
dat <- rbind(dat, dat[1, ])
lines(y ~ x, data = dat, col = colors[id + 1], lwd = .5) #
})
)
plot(im2)
invisible(sapply(
base::split(fc$contours, fc$contours$id),
function(dat) {
dat <- rbind(dat, dat[1, ])
lines(y ~ x, data = dat, col = colors[id + 1], lwd = .5) #
})
)
jpeg("imager_ContourDetection.jpg", width = 1000, height = 700, quality = 100)
par(mar = c(0,0,0,0))
plot(im1)
purrr::walk(cont,function(v) lines(v$x,v$y,col=colors[v$level*10]))
dev.off()
jpeg("Rvision_ContourDetection.jpg", width = 1000, height = 700, quality = 100)
plot(im2)
invisible(sapply(
base::split(fc$contours, fc$contours$id),
function(dat) {
dat <- rbind(dat, dat[1, ])
lines(y ~ x, data = dat, col = colors[id + 1], lwd = .5) #
})
)
dev.off()
jpeg("imager_ContourDetection.jpg", width = 1000, height = 700, quality = 100)
par(mar = c(0,0,0,0))
plot(im1)
purrr::walk(cont,function(v) lines(v$x,v$y,col=colors[v$level*10]))
dev.off()
cont <- contours(im1_g, nlevels = 10)
levs <- unique(purrr::map_dbl(cont, ~ .x$level))
colors <- rainbow(length(levs))
jpeg("imager_ContourDetection.jpg", width = 1000, height = 700, quality = 100)
par(mar = c(0,0,0,0))
plot(im1)
purrr::walk(cont,function(v) lines(v$x,v$y,col=colors[v$level*10]))
dev.off()
dev.off()
edger_extract <- function(imagepath,
roi_in = NULL,
th = 0.1,
regions = 1,
shift = c(0,0),
rotate = 0,
color = "red",
show_image = TRUE)
{
if (is.null(roi_in) == FALSE & is.list(roi_in) == FALSE) {
stop("roi_in must be a list object.")
}
if (th <= 0) {
stop("th must be a positive non-zero number.")
}
if (is.character(color) == FALSE) {
stop("color must be a character string.")
}
rgbcolor <- as.vector(grDevices::col2rgb(color)/255)
roi <- edger_identify(ref_ims = imagepath,
roi_in = roi_in,
th = th,
regions = regions)
im <- imager::load.image(imagepath)
im_df <- edger_im_to_df(im)
m <- edger_match(imdf = im_df,
roi = roi,
shift = shift,
rotate = rotate)
if (show == TRUE) {
edger_recolor(imdf = im_df,
m = m,
rgbcolor = rgbcolor,
show = TRUE)
}
return(im_df[im_df$id %in% m,])
}
edger_extract("C://Users/stri7929/Desktop/02858.jpg")
source("C://Users/stri7929/Documents/GitHub/edger/R/edger_apply.R")
source("C://Users/stri7929/Documents/GitHub/edger/R/edger_df_to_im.R")
source("C://Users/stri7929/Documents/GitHub/edger/R/edger_display.R")
source("C://Users/stri7929/Documents/GitHub/edger/R/edger_find.R")
source("C://Users/stri7929/Documents/GitHub/edger/R/edger_identify.R")
source("C://Users/stri7929/Documents/GitHub/edger/R/edger_im_to_df.R")
source("C://Users/stri7929/Documents/GitHub/edger/R/edger_im_to_grad.R")
source("C://Users/stri7929/Documents/GitHub/edger/R/edger_match.R")
source("C://Users/stri7929/Documents/GitHub/edger/R/edger_name_old.R")
source("C://Users/stri7929/Documents/GitHub/edger/R/edger_overlay.R")
source("C://Users/stri7929/Documents/GitHub/edger/R/edger_recolor.R")
source("C://Users/stri7929/Documents/GitHub/edger/R/edger_roi.R")
source("C://Users/stri7929/Documents/GitHub/edger/R/edger_save.R")
edger_extract("C://Users/stri7929/Desktop/02858.jpg")
edger_extract("C://Users/stri7929/Desktop/02838.jpg")
library(tidyverse)
edger_extract("C://Users/stri7929/Desktop/02838.jpg")
edger_extract <- function(imagepath,
roi_in = NULL,
th = 0.1,
regions = 1,
shift = c(0,0),
rotate = 0,
color = "red",
show_image = TRUE)
{
if (is.null(roi_in) == FALSE & is.list(roi_in) == FALSE) {
stop("roi_in must be a list object.")
}
if (th <= 0) {
stop("th must be a positive non-zero number.")
}
if (is.character(color) == FALSE) {
stop("color must be a character string.")
}
rgbcolor <- as.vector(grDevices::col2rgb(color)/255)
roi <- edger_identify(ref_ims = imagepath,
roi_in = roi_in,
th = th,
regions = regions)
im <- imager::load.image(imagepath)
im_df <- edger_im_to_df(im)
m <- edger_match(imdf = im_df,
roi = roi,
shift = shift,
rotate = rotate)
if (show_image == TRUE) {
edger_recolor(imdf = im_df,
m = m,
rgbcolor = rgbcolor,
show = TRUE)
}
return(im_df[im_df$id %in% m,])
}
edger_extract("C://Users/stri7929/Desktop/02838.jpg")
edges <- edger_extract("C://Users/stri7929/Desktop/02838.jpg")
edges
edges[edges$id = 1710844]
edges[edges$id == 1710844,]
edger_extract <- function(imagepath,
roi_in = NULL,
th = 0.1,
regions = 1,
shift = c(0,0),
rotate = 0,
color = "red",
show_image = TRUE)
{
if (is.null(roi_in) == FALSE & is.list(roi_in) == FALSE) {
stop("roi_in must be a list object.")
}
if (th <= 0) {
stop("th must be a positive non-zero number.")
}
if (is.character(color) == FALSE) {
stop("color must be a character string.")
}
rgbcolor <- as.vector(grDevices::col2rgb(color)/255)
roi <- edger_identify(ref_ims = imagepath,
roi_in = roi_in,
th = th,
regions = regions)
im <- imager::load.image(imagepath)
im_df <- edger_im_to_df(im)
m <- edger_match(imdf = im_df,
roi = roi,
shift = shift,
rotate = rotate)
if (show_image == TRUE) {
edger_recolor(imdf = im_df,
m = m,
rgbcolor = rgbcolor,
show = TRUE)
}
return(distinct(im_df[im_df$id %in% m,c("x", "y", "id")]))
}
edges <- edger_extract("C://Users/stri7929/Desktop/02838.jpg")
edges
edges <- edger_extract("C://Users/stri7929/Desktop/02838.jpg", th = .05)
edges <- edger_extract("C://Users/stri7929/Desktop/02838.jpg", th = .03)
edges
edges <- edger_extract("C://Users/stri7929/Desktop/02838.jpg", th = .03, rotate = 15)
devtools::document()
getwd()
setwd("C://Users/stri7929/Documents/GitHub/edger")
devtools::document()
rm(list = c("edger_apply", "edger_df_to_im", "edger_display", "edger_extract", "edger_find", "edger_identify", "edger_im_to_df", "edger_im_to_grad", "edger_match", "edger_name", "edger_overlay", "edger_recolor", "edger_roi", "edger_save"))
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
rmarkdown::render("ender_use.RMD", output_format = "github_document")
rmarkdown::render("edger_use.RMD", output_format = "github_document")
rmarkdown::render("vignettes/edger_use.RMD", output_format = "github_document")
